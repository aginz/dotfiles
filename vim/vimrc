""""""""""""""""
"VUNDLE PLUGINS
""""""""""""""""
set nocompatible              " Required by Vundle
filetype off                  " Required by Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'digitaltoad/vim-pug'
Plugin 'elixir-lang/vim-elixir'
Plugin 'fatih/vim-go'
Plugin 'ggreer/the_silver_searcher'
Plugin 'godlygeek/tabular'
Plugin 'jeffkreeftmeijer/vim-numbertoggle'
Plugin 'kien/ctrlp.vim'
Plugin 'lifepillar/vim-solarized8'
Plugin 'mattn/emmet-vim'
Plugin 'Raimondi/delimitMate'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tComment'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'unblevable/quick-scope'

" JS/React Plugins
Plugin 'sbdchd/neoformat'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'valloric/MatchTagAlways'
Plugin 'epilande/vim-es2015-snippets'
Plugin 'epilande/vim-react-snippets'
Plugin 'SirVer/ultisnips'
Plugin 'w0rp/ale'
" Plugin 'tpope/vim-projectionist'
" Plugin 'prettier/prettier'
" Plugin 'neomake/neomake'

call vundle#end()            " Required by Vundle
filetype plugin indent on    " Required by Vundle

"" VIM CONFIGURATION
let mapleader=","               " Map leader key to ,
syntax enable                   " syntax highlighting
set clipboard=unnamed           " access system clipboard
set colorcolumn=80              " mark 80 characters
set encoding=utf-8
set laststatus=2                " Always display the status line
set number                      " show line numbers
set noshowmode                  " Remove duplicate status
set noswapfile                  " Disable swapfile from creating
set wildmenu                    " visual autocomplete for command menu
set wildmode="list:longest"
set cursorline                  " horizontal highlighting
set scrolloff=3                 " Offset scroll by 3 lines
set shell=/bin/sh               " Load correct ruby
set showcmd                     " display incomplete commands
set showmatch                   " Show matching brackets
set si                          " smart indent
set timeoutlen=1000             " used for mapping delays
set ttimeoutlen=0               " used for keycode delays
filetype plugin indent on       " load file type plugins + indentation

""""""""""""""""
"SEARCH
""""""""""""""""
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Ag.vim will always search from project root
let g:ag_working_path_mode="r"

set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

set rtp+=/usr/local/opt/fzf     " use fzf

""""""""""""""""
"NerdTree
""""""""""""""""
" Toggle nerd tree with <Leader> nt
map <Leader>nt :NERDTreeToggle<CR>

""""""""""""""""
"CTRL-P
""""""""""""""""
" Open CTRL P
nnoremap <Leader>o :CtrlP o<CR>
" Show 20 results in CtrlP
let g:ctrlp_match_window = 'max:20'

""""""""""""""""
"Quick-Scope
""""""""""""""""
" Trigger a highlight only when pressing f and F
let g:qs_highlight_on_keys = ['f', 'F']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY by Gary Bernhardt
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
  endfunction
  inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

""""""""""""""""
"THEME
""""""""""""""""
set background=dark
" Fix colorscheme for tmux + vim
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
colorscheme solarized8

" Make cursor vertical line in insert mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

""""""""""""""""
"WHITESPACE / TABS
""""""""""""""""
set autoindent                           " copy indentation from previous line
set nowrap                               " don't wrap lines
set tabstop=2 softtabstop=2 shiftwidth=2 " a tab is two spaces (or set this to 4)
set expandtab                            " use spaces, not tabs (optional)
set backspace=indent,eol,start           " backspace through everything in insert mode
set list listchars=tab:»·,trail:·        " Display extra whitespace
nnoremap <Leader>rt :%s/\s\+$//e<CR>     " Clear trailing whitespace

""""""""""""""""
"Emmet
""""""""""""""""
" Enable just for html/css
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

""""""""""""""""
"MISC MAPPINGS
""""""""""""""""
" Map jk to escape
inoremap jk <ESC>
vnoremap jk <ESC>
" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>
" Breakout into a new tab
nnoremap <Leader>bt <C-w>T
" Close quickfix
nnoremap <Leader>q :cclose<CR>
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>
" Git Blame mapping with <Leader> b
vmap <Leader>b :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>
" Open VIMRC file with <Leader> vm
nmap <Leader>vm :tabedit $MYVIMRC<CR>
" Source VIMRC with <Leader> so
nmap <Leader>so :source $MYVIMRC<CR>
" Remove highlighting with CTRL-n
nmap <c-n> :nohl<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"RUBY START
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Drop in Pry to debug. <Leader> bp
nmap <leader>bp orequire 'pry'; binding.pry<esc>^

""""""""""""""""
"TMUX RUNNER
""""""""""""""""
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>
nnoremap <leader>pry :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'pry'}<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>
nnoremap <leader>kr :VtrKillRunner<cr>
nnoremap <leader>va :VtrAttachToPane<cr>
nmap <C-f> :VtrSendLinesToRunner<cr>
vmap <C-f> <Esc>:VtrSendLinesToRunner<cr>
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>

""""""""""""""""
"RSpec.vim MAPPINGS
""""""""""""""""
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_command = "!rspec --drb {spec}"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"RUBY END
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"JS START
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Allow Vim-JSX to highlight *.js files
let g:jsx_ext_required = 0
" Enable highlighting flow
let g:javascript_plugin_flow = 1
" Allow MatchTagAlways to highlight JSX
let g:mta_filetypes = {
  \ 'javascript.jsx' : 1,
  \}
" Trigger for snippet configuration
let g:UltiSnipsExpandTrigger="<c-k>"

" Allow neoformat to format file with prettier
let g:neoformat_try_formatprg = 1
augroup NeoformatAutoFormat
  autocmd!
  autocmd FileType javascript,javascript.jsx setlocal formatprg=prettier\
        \--stdin\
        \--print-width\ 80\
        \--single-quote\
        \--trailing-comma\ es5
  autocmd BufWritePre *.js,*.jsx Neoformat
augroup END

" Allow ale to fix js files on save
let g:ale_fix_on_save = 1
let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \   'javascript': ['prettier', 'eslint'],
      \}
" Limit linters used for JavaScript.
let g:ale_linters = {
\  'javascript': ['flow']
\}
highlight clear ALEErrorSign " otherwise uses error bg color (typically red)
highlight clear ALEWarningSign " otherwise uses error bg color (typically red)
let g:ale_sign_error = 'X' " could use emoji
let g:ale_sign_warning = '?' " could use emoji
let g:ale_statusline_format = ['X %d', '? %d', '']
" %linter% is the name of the linter that provided the message
" %s is the error or warning message
let g:ale_echo_msg_format = '%linter% says %s'
" Map keys to navigate between lines with errors and warnings.
nnoremap <leader>an :ALENextWrap<cr>
nnoremap <leader>ap :ALEPreviousWrap<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"JS End
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
