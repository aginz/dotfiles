""""""""""""""""
"VUNDLE PLUGINS
""""""""""""""""
set nocompatible              " Required by Vundle
filetype off                  " Required by Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'fatih/vim-go'
Plugin 'ggreer/the_silver_searcher'
Plugin 'godlygeek/tabular'
Plugin 'jeffkreeftmeijer/vim-numbertoggle'
Plugin 'kien/ctrlp.vim'
Plugin 'rizzatti/dash.vim'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tComment'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-unimpaired'
Plugin 'unblevable/quick-scope'

call vundle#end()            " Required by Vundle
filetype plugin indent on    " Required by Vundle

"" VIM CONFIGURATION
runtime macros/matchit.vim      " enable matchit plugin
let mapleader = "\<Space>"      " Map leader key to space bar
syntax enable                   " syntax highlighting
set clipboard=unnamed           " access system clipboard
set colorcolumn=80              " mark 80 characters
set encoding=utf-8
set laststatus=2                " Always display the status line
set number                      " show line numbers
set noshowmode                  " Remove duplicate status
set noswapfile                  " Disable swapfile from creating
set wildmenu                    " visual autocomplete for command menu
set wildmode="list:longest"
set cursorline                  " horizontal highlighting
set scrolloff=3                 " Offset scroll by 3 lines
set shell=/bin/sh               " Load correct ruby
set showcmd                     " display incomplete commands
set si                          " smart indent
set timeoutlen=1000             " used for mapping delays
set ttimeoutlen=0               " used for keycode delays
filetype plugin indent on       " load file type plugins + indentation

""""""""""""""""
"SEARCH
""""""""""""""""
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Ag.vim will always search from project root
let g:ag_working_path_mode="r"
" Show 20 results in CtrlP
let g:ctrlp_match_window = 'max:20'

"Search Dash docs
nmap <silent> <leader>d <Plug>DashSearch

set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY by Gary Bernhardt
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

""""""""""""""""
"THEME
""""""""""""""""
set background=dark

"" grb256
:set t_Co=256 " 256 colors
:color grb256
" for color column 80 (http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim)
highlight ColorColumn ctermbg=163
" for highlighting in Visual mode
hi Visual term=reverse cterm=reverse guibg=Grey

"" Solarized
" let g:solarized_termcolors=16
" let g:solarized_termtrans = 1      "make solarized work with tmux
" let g:airline_theme="solarized"    "vim airline theme
" colorscheme solarized

""""""""""""""""
"WHITESPACE
""""""""""""""""
set nowrap                               " don't wrap lines
set tabstop=2 softtabstop=2 shiftwidth=2 " a tab is two spaces (or set this to 4)
set expandtab                            " use spaces, not tabs (optional)
set backspace=indent,eol,start           " backspace through everything in insert mode
set list listchars=tab:»·,trail:·        " Display extra whitespace
nnoremap <Leader>rt :%s/\s\+$//e<CR>     " Clear trailing whitespace
au BufWritePre *.rb :%s/\s\+$//e         " Remove trailing whitespace on save for ruby files


""""""""""""""""
"MAPPINGS
""""""""""""""""
" Map jk to escape
inoremap jk <ESC>
vnoremap jk <ESC>
" Type <Space>w to save file
nnoremap <Leader>w :w<CR>
" Drop in Pry to debug. <Space> bp
nmap <leader>bp orequire 'pry'; binding.pry<esc>^
" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>
" Breakout into a new tab
nnoremap <Leader>bt <C-w>T
" Open CTRL P
nnoremap <Leader>o :CtrlP o<CR>
" Close quickfix
nnoremap <Leader>q :cclose<CR>
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>

" TMUX RUNNER
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>
nnoremap <leader>pry :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'pry'}<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>
nnoremap <leader>kr :VtrKillRunner<cr>
nnoremap <leader>va :VtrAttachToPane<cr>
nmap <C-f> :VtrSendLinesToRunner<cr>
vmap <C-f> <Esc>:VtrSendLinesToRunner<cr>

" NERDTREE MAPPINGS
" Toggle nerd tree with <SPACE> nt
map <Leader>nt :NERDTreeToggle<CR>

" RSpec.vim MAPPINGS
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_command = "VtrSendCommandToRunner! rspec {spec}"

" Copy & paste to system clipboard with <Space>p and <Space>y
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" Git Blame mapping with <SPACE> b
vmap <Leader>b :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

" Open VIMRC file with <SPACE> vm
nmap <Leader>vm :tabedit $MYVIMRC<CR>

" Source VIMRC with <SPACE> so
nmap <Leader>so :source $MYVIMRC<CR>

" Trigger a highlight only when pressing f and F. (quick-scope)
let g:qs_highlight_on_keys = ['f', 'F']

" Make cursor vertical line in insert mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
