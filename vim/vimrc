""""""""""""""""
"VUNDLE PLUGINS
""""""""""""""""
set nocompatible              " Required by Vundle
filetype off                  " Required by Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'digitaltoad/vim-pug'
Plugin 'elixir-lang/vim-elixir'
Plugin 'fatih/vim-go'
Plugin 'ggreer/the_silver_searcher'
Plugin 'godlygeek/tabular'
Plugin 'jeffkreeftmeijer/vim-numbertoggle'
Plugin 'junegunn/fzf.vim'
Plugin 'lifepillar/vim-solarized8'
Plugin 'mattn/emmet-vim'
Plugin 'roman/golden-ratio'
Plugin 'scrooloose/nerdtree'
Plugin 'tComment'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'unblevable/quick-scope'
Plugin 'wincent/terminus'
Plugin 'Yggdroot/indentLine'

" Git Plugins
Plugin 'airblade/vim-gitgutter'
Plugin 'christoomey/vim-conflicted'
Plugin 'tpope/vim-fugitive'

" JS/React Plugins
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'valloric/MatchTagAlways'
Plugin 'epilande/vim-es2015-snippets'
Plugin 'epilande/vim-react-snippets'
Plugin 'w0rp/ale'
Plugin 'moll/vim-node'

" Typescript
Plugin 'leafgarland/typescript-vim'
Plugin 'peitalin/vim-jsx-typescript'

call vundle#end()            " Required by Vundle
filetype plugin indent on    " Required by Vundle

"" VIM CONFIGURATION
let mapleader=","               " Map leader key to ,
syntax enable                   " syntax highlighting
set clipboard=unnamed           " access system clipboard
set colorcolumn=80              " mark 80 characters
set encoding=utf-8
set laststatus=2                " Always display the status line
set number                      " show line numbers
set noshowmode                  " Remove duplicate status
set noswapfile                  " Disable swapfile from creating
set wildmenu                    " visual autocomplete for command menu
set wildmode="list:longest"
set cursorline                  " horizontal highlighting
set scrolloff=3                 " Offset scroll by 3 lines
set shell=/bin/sh               " Load correct ruby
set showcmd                     " display incomplete commands
set showmatch                   " Show matching brackets
set si                          " smart indent
set timeoutlen=1000             " used for mapping delays
set ttimeoutlen=0               " used for keycode delays
filetype plugin indent on       " load file type plugins + indentation

""""""""""""""""
"SEARCH
""""""""""""""""
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use Ag for FZF for listing files.  Fast and respects gitignore
  let $FZF_DEFAULT_COMMAND = 'ag --hidden -g ""'
endif

" Ag.vim will always search from project root
let g:ag_working_path_mode="r"

set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

" Faster search and replace in normal and visual mode
nnoremap <leader>sub :%s///gc<left><left><left><left>
vnoremap <leader>sub :s///gc<left><left><left><left>

""""""""""""""""
"FZF
""""""""""""""""
" Set fzf runtime path when installed with git
set rtp+=~/.fzf
" fuzzzzzzzy find
nmap <Leader>o :Files<CR>
" buffer management
nmap <leader>b :Buffers<CR>
" grep for cword
nmap <leader>A :Ag! <C-R>=expand("<cword>")<CR><CR>
nmap <leader>a :Ag <C-R>=expand("<cword>")<CR><CR>
" fzf window
let g:fzf_layout = { 'down': '~50%' }
" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are
"     required:
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?"
"   key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)"
" Open files from fzf window with splits or tabs
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

""""""""""""""""
"NerdTree
""""""""""""""""
" Toggle nerd tree with <Leader> nt
map <Leader>nt :NERDTreeToggle<CR>

""""""""""""""""
"Quick-Scope
""""""""""""""""
" Trigger a highlight only when pressing f and F
let g:qs_highlight_on_keys = ['f', 'F']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY by Gary Bernhardt
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
  endfunction
  inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

""""""""""""""""
"THEME
""""""""""""""""
set background=dark
" Fix colorscheme for tmux + vim
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
colorscheme solarized8

""""""""""""""""
"THEME - STATUSLINE
""""""""""""""""
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? 'OK' : printf(
        \   '%dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
endfunction

set statusline=\ %f      " Path to the file
set statusline+=\ %m     " Modified flag
set statusline+=\ %y     " Filetype
set statusline+=%=       " Switch to the right side
set statusline+=%l       " current line
set statusline+=/%L      " Total lines
set statusline+=\ -\ %{LinterStatus()}\

""""""""""""""""
"WHITESPACE / TABS
""""""""""""""""
set autoindent                           " copy indentation from previous line
set nowrap                               " don't wrap lines
set tabstop=2 softtabstop=2 shiftwidth=2 " a tab is two spaces (or set this to 4)
set expandtab                            " use spaces, not tabs (optional)
set backspace=indent,eol,start           " backspace through everything in insert mode
" set list listchars=tab:»·,trail:·        " Display extra whitespace
nnoremap <Leader>rt :%s/\s\+$//e<CR>     " Clear trailing whitespace
let g:vim_json_syntax_conceal = 0        " fixes a problem with indentLine that never lets you see quotes in json

""""""""""""""""
"FOLDING
""""""""""""""""
"Enable indent folding
set foldenable
set foldmethod=indent
set foldlevel=999

"open/close a fold
nnoremap <leader>ff za
"open/close a fold recursively
nnoremap <leader>FF zA

"Maps for folding, unfolding all
nnoremap <LEADER>fu zM<CR>
nnoremap <LEADER>uf zR<CR>

""""""""""""""""
"Emmet
""""""""""""""""
" Enable just for html/css
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

""""""""""""""""
"Git
""""""""""""""""
" Git Blame mapping with <Leader> B
vmap <Leader>B :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>
" Unstage hunk in git
nmap <Leader>hr <Plug>GitGutterUndoHunk

""""""""""""""""
"CONVENIENCE
""""""""""""""""
" Use C-Space to Esc out of any mode
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>
" Terminal sees <C-@> as <C-space>
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>

" Q for Ex mode is useless. This will run the macro in q register
nnoremap Q @q
" Swap 0 and ^. Jump to the first non-whitespace character with 0 and go to
" beginning of line with ^
nnoremap 0 ^
nnoremap ^ 0

augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" change two vertically split windows to horizontally split
nnoremap <leader>h <c-w>t <c-w>K
" change two horizontally split windows to vertically split
nnoremap <leader>v <c-w>t <c-w>H

""""""""""""""""
"PRETTIER CODE
""""""""""""""""
" Allow ale to fix js files on save
let g:ale_fix_on_save = 1
let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \   'javascript': ['prettier', 'eslint'],
      \   'typescript': ['prettier', 'eslint'],
      \   'ruby': ['standardrb'],
      \}
" Limit linters used for JavaScript and Ruby.
let g:ale_linters = {
\  'javascript': ['flow', 'eslint'],
\  'typescript': ['tsc', 'eslint'],
\  'ruby': ['standardrb'],
\}
highlight clear ALEErrorSign " otherwise uses error bg color (typically red)
highlight clear ALEWarningSign " otherwise uses error bg color (typically red)
let g:ale_sign_error = 'X' " could use emoji
let g:ale_sign_warning = '?' " could use emoji
" %linter% is the name of the linter that provided the message
" %s is the error or warning message
let g:ale_echo_msg_format = '%linter% says %s'
" Map keys to navigate between lines with errors and warnings.
nnoremap <leader>an :ALENextWrap<cr>
nnoremap <leader>ap :ALEPreviousWrap<cr>

""""""""""""""""
"MISC MAPPINGS
""""""""""""""""
" Map jk to escape
inoremap jk <ESC>
vnoremap jk <ESC>
" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>
" Breakout into a new tab
nnoremap <Leader>bt <C-w>T
" Close quickfix
nnoremap <Leader>q :cclose<CR>
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>
" Open VIMRC file with <Leader> vm
nmap <Leader>vm :tabedit $MYVIMRC<CR>
" Source VIMRC with <Leader> so
nmap <Leader>so :source $MYVIMRC<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"RUBY START
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Drop in Pry to debug. <Leader> bp
nmap <leader>bp orequire 'pry'; binding.pry<esc>^

""""""""""""""""
"TMUX RUNNER
""""""""""""""""
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>
nnoremap <leader>pry :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'pry'}<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>
nnoremap <leader>kr :VtrKillRunner<cr>
nnoremap <leader>va :VtrAttachToPane<cr>
nmap <C-f> :VtrSendLinesToRunner<cr>
vmap <C-f> <Esc>:VtrSendLinesToRunner<cr>
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>

""""""""""""""""
"RSpec.vim MAPPINGS
""""""""""""""""
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>all :call RunAllSpecs()<CR>
let g:rspec_command = "!rspec --drb {spec}"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"RUBY END
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"JS START
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Allow Vim-JSX to highlight *.js files
let g:jsx_ext_required = 0
" Enable highlighting flow
let g:javascript_plugin_flow = 1
" Allow MatchTagAlways to highlight JSX
let g:mta_filetypes = {
  \ 'javascript.jsx' : 1,
  \}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"JS End
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" open terraform docs in browser
autocmd FileType tf nnoremap <silent> gd :call OpenTerraformDoc()<CR>

function! OpenTerraformDoc()
    let lineData = split(substitute(getline('.'), '"', '', 'g'), ' ')

    if len(lineData) < 3
      return
    endif

    let type = get(lineData, 0)
    let source = get(lineData, 1)

    let baseURI = 'https://www.terraform.io/docs/providers/'
    let resourceType=''
    if match('resource', type) == 0
      let resourceType="r"
    elseif match('data', type) == 0
      let resourceType="d"
    else
      return
    endif

    let provider = matchstr(source, '^[a-z]\+_')
    let sourceName = substitute(source, provider, '', '')
    let provider = substitute(provider, '_', '', '')

    silent exec "!open '" . join([baseURI, provider, '/', resourceType, '/', sourceName, '.html'], '') . "'" | redraw!
endfunction
